#!/usr/bin/env python3
"""
DeepResearch × LangManus - 気象データ探索プロジェクト
メインエントリーポイント
"""

import argparse
import asyncio
import os
from pathlib import Path
from datetime import datetime

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("Warning: python-dotenv not installed. Please set environment variables manually.")

def setup_logging():
    """ログ設定の初期化"""
    try:
        from loguru import logger
        log_level = os.getenv("LOG_LEVEL", "INFO")
        logger.remove()
        logger.add(
            "logs/app_{time:YYYY-MM-DD}.log",
            rotation="1 day",
            retention="30 days",
            level=log_level,
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}"
        )
        logger.add(
            lambda msg: print(msg, end=""),
            level=log_level,
            format="<green>{time:HH:mm:ss}</green> | <level>{level}</level> | {message}"
        )
        return logger
    except ImportError:
        print("Warning: loguru not installed. Using basic logging.")
        import logging
        logging.basicConfig(level=logging.INFO)
        return logging.getLogger(__name__)

def setup_output_directory():
    """出力ディレクトリの作成"""
    output_dir = Path(os.getenv("OUTPUT_DIR", "./outputs"))
    output_dir.mkdir(exist_ok=True)
    
    # サブディレクトリも作成
    (output_dir / "reports").mkdir(exist_ok=True)
    (output_dir / "data").mkdir(exist_ok=True)
    (output_dir / "charts").mkdir(exist_ok=True)
    
    return output_dir

async def run_weather_research(query: str, location: str, output_format: str = "report"):
    """気象研究ワークフローの実行"""
    logger = setup_logging()
    logger.info(f"Starting weather research for query: {query}")
    logger.info(f"Location: {location}, Output format: {output_format}")
    
    try:
        # TODO: Implement the actual workflow
        # workflow = WeatherResearchWorkflow()
        # result = await workflow.run(query=query, location=location)
        
        # For now, return a placeholder
        result = {
            "query": query,
            "location": location,
            "status": "success",
            "message": "Weather research workflow completed successfully",
            "timestamp": datetime.now().isoformat(),
            "output_format": output_format
        }
        
        print("✅ Weather research completed successfully")
        return result
        
    except Exception as e:
        print(f"❌ Error in weather research workflow: {e}")
        raise

def main():
    """メイン関数"""
    parser = argparse.ArgumentParser(
        description="DeepResearch × LangManus - 気象データ探索プロジェクト"
    )
    
    parser.add_argument(
        "--query",
        type=str,
        required=True,
        help="研究クエリ（例：'過去5年間の首都圏における猛暑日と熱中症関連の対策を調べて'）"
    )
    
    parser.add_argument(
        "--location",
        type=str,
        default="Tokyo,JP",
        help="対象地域（例：'Tokyo,JP', 'Osaka,JP'）"
    )
    
    parser.add_argument(
        "--output-format",
        type=str,
        choices=["report", "dashboard", "json"],
        default="report",
        help="出力形式"
    )
    
    parser.add_argument(
        "--debug",
        action="store_true",
        help="デバッグモードで実行"
    )
    
    args = parser.parse_args()
    
    # デバッグモード設定
    if args.debug:
        os.environ["DEBUG"] = "true"
        os.environ["LOG_LEVEL"] = "DEBUG"
    
    # 初期化
    output_dir = setup_output_directory()
    
    print("🚀 DeepResearch × LangManus - Starting weather research project")
    print(f"📁 Output directory: {output_dir.absolute()}")
    
    # 非同期実行
    try:
        result = asyncio.run(
            run_weather_research(
                query=args.query,
                location=args.location,
                output_format=args.output_format
            )
        )
        
        # 結果の出力
        output_file = output_dir / "reports" / f"{datetime.now().strftime('%Y%m%d_%H%M')}_report.md"
        
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(f"# Weather Research Report\n\n")
            f.write(f"**Query:** {result['query']}\n\n")
            f.write(f"**Location:** {result['location']}\n\n")
            f.write(f"**Status:** {result['status']}\n\n")
            f.write(f"**Timestamp:** {result['timestamp']}\n\n")
            f.write(f"**Message:** {result['message']}\n\n")
            f.write("---\n\n")
            f.write("*Generated by DeepResearch × LangManus*\n")
        
        print(f"📄 Report generated: {output_file}")
        
    except KeyboardInterrupt:
        print("⚠️  Process interrupted by user")
    except Exception as e:
        print(f"💥 Fatal error: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
